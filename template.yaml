AWSTemplateFormatVersion: '2010-09-09'
Description: 'WordPress RDS MySQL Database with Secrets Manager, EC2 Instances, Route 53 Hosted Zone, and CloudWatch Events'

Parameters:
  DomainName:
    Type: String
    Description: 'Domain name for the Route 53 Hosted Zone'

  DBUsername:
    Type: String
    Description: 'Database username for RDS instance'
    Default: 'admin'

  DBPassword:
    Type: String
    Description: 'Database password for RDS instance'
    NoEcho: true

  DBName:
    Type: String
    Description: 'Database name for RDS instance'
    Default: 'wordpress-blog'

  DBPort:
    Type: String
    Description: 'Database port for RDS instance'
    Default: '3306'

  SSHAccessIP:
    Type: String
    Description: 'IP address for SSH access to RDS instance'
    Default: '0.0.0.0/0'

Resources:
  # RDS MySQL Database
  WordPressDatabase:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      Engine: 'mysql'
      EngineVersion: '8.0.32'
      DBInstanceClass: 'db.t2.micro'
      DBName: !Ref DBName
      AllocatedStorage: 20
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBInstanceIdentifier: 'WordPressDBInstance'
      MultiAZ: false
      PubliclyAccessible: false
      StorageType: 'gp2'
      VPCSecurityGroups:
        - !Ref WordPressDBSecurityGroup
      Tags:
        - Key: 'Name'
          Value: 'WordPressDBInstance'

  # RDS MySQL Database Security Group
  WordPressDBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security Group for RDS MySQL Database'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref DBPort
          ToPort: !Ref DBPort
          CidrIp: !Ref SSHAccessIP

  # Security Group for EC2 Instances
  WordPressInstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security Group for WordPress EC2 instances'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHAccessIP
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'     # Allow HTTP from anywhere (for simplicity)
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'     # Allow HTTPS from anywhere (for simplicity)
      Tags:
        - Key: 'Name'
          Value: 'WordPressInstanceSG'

  # Route 53 Hosted Zone
  WordPressHostedZone:
    Type: 'AWS::Route53::HostedZone'
    Properties:
      Name: !Ref DomainName

  # Route 53 RecordSet for DEV EC2 Instance
  DevSubdomainRecord:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: !Ref WordPressHostedZone
      Name: !Sub 'dev.${DomainName}.'
      Type: A
      TTL: '300'
      ResourceRecords:
        - !GetAtt DevWordPressInstance.PublicIp

  # Route 53 RecordSet for LIVE EC2 Instance
  LiveSubdomainRecord:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: !Ref WordPressHostedZone
      Name: !Sub 'www.${DomainName}.'
      Type: A
      TTL: '300'
      ResourceRecords:
        - !GetAtt LiveWordPressInstance.PublicIp

  # Secrets Manager Secret for Database Credentials
  DatabaseSecret:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: 'WordPressDBSecret'
      Description: 'Secret for WordPress Database Credentials'
      SecretString:
        DBHost: !GetAtt WordPressDatabase.Endpoint.Address
        DBUsername: !Ref DBUsername
        DBPassword: !Ref DBPassword
        DBName: !Ref DBName
        DBPort: !Ref DBPort

  # DEV EC2 Instance
  DevWordPressInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: 'ami-053b0d53c279acc90'   # Replace with the Ubuntu 20.04 AMI ID for your region
      InstanceType: 't2.micro'           # Replace with the desired instance type
      KeyName: 'simplilearn-keypair'      # Replace with your EC2 Key Pair name
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          sudo su
          apt update
          apt install -y apache2 mysql-server php libapache2-mod-php php-mysql
          systemctl enable apache2
          systemctl start apache2

          # Install AWS CLI to retrieve secrets from Secrets Manager
          apt install -y awscli

          # Get database credentials from Secrets Manager
          DB_SECRET=$(aws secretsmanager get-secret-value --secret-id WordPressDBSecret --query SecretString --output text)
          DB_HOST=$(echo "$DB_SECRET" | jq -r '.DBHost')
          DB_USERNAME=$(echo "$DB_SECRET" | jq -r '.DBUsername')
          DB_PASSWORD=$(echo "$DB_SECRET" | jq -r '.DBPassword')
          DB_NAME=$(echo "$DB_SECRET" | jq -r '.DBName')

          # Download and install WordPress
          cd /var/www/html
          wget https://wordpress.org/latest.tar.gz
          tar -xzf latest.tar.gz
          mv wordpress/* .
          rm -rf wordpress latest.tar.gz

          # Configure WordPress
          cp wp-config-sample.php wp-config.php
          sed -i "s/database_name_here/wordpress-blog-dev/g" wp-config.php
          sed -i "s/username_here/${DBUsername}/g" wp-config.php
          sed -i "s/password_here/${DBPassword}/g" wp-config.php
          sed -i "s/localhost/${WordPressDatabase.Endpoint.Address}/g" wp-config.php
          chown -R www-data:www-data /var/www/html

          # Restart Apache
          systemctl restart apache2

      SecurityGroups:
        - !Ref WordPressInstanceSecurityGroup
      IamInstanceProfile: !Ref EC2InstanceRole

  # IAM Role for EC2 Instances
  EC2InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'  # Add additional policies as needed to access other services
      Tags:
        - Key: 'Name'
          Value: 'EC2InstanceRole'

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        # Add additional policies as needed to start and stop EC2 instances

  # Lambda Function
  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'StartStopDevEC2Instance'
      Runtime: nodejs12.x                 # Use Node.js 12.x runtime
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.handler              # Use index.js as the handler file (default for Node.js)
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const ec2 = new AWS.EC2();

          exports.handler = async (event) => {
              const currentHour = new Date().getUTCHours();
              // Check if it's 9 AM or 6 PM
              if (currentHour === 9 || currentHour === 18) {
                  if (event['detail-type'] === 'Scheduled Event') {
                      const instanceId = (await ec2.describeInstances({
                          Filters: [
                              {
                                  Name: 'tag:Name',
                                  Values: ['DevWordPressInstance'] // EC2 instance Name tag
                              }
                          ]
                      }).promise()).Reservations[0].Instances[0].InstanceId;
                      if (currentHour === 9) {
                          // Start the instance
                          await ec2.startInstances({ InstanceIds: [instanceId] }).promise();
                      } else if (currentHour === 18) {
                          // Stop the instance
                          await ec2.stopInstances({ InstanceIds: [instanceId] }).promise();
                      }
                  }
              }
          };

  # CloudWatch Event Rule to Trigger Lambda
  LambdaEventRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Name: 'StartStopDevEC2InstanceRule'
      ScheduleExpression: 'cron(0 9,18 * * ? *)'   # 9 AM and 6 PM daily
      State: 'ENABLED'
      Targets:
        - Arn: !GetAtt LambdaFunction.Arn
          Id: 'StartStopDevEC2InstanceTarget'
          Input: '{"time": "09:00"}'  # 09:00 AM is the start time, 06:00 PM is the stop time
          RoleArn: !GetAtt LambdaExecutionRole.Arn

  # LIVE EC2 Instance (Similar configuration as DEV EC2 Instance)
  LiveWordPressInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: 'ami-053b0d53c279acc90'   # Replace with the Ubuntu 20.04 AMI ID for your region
      InstanceType: 't2.micro'           # Replace with the desired instance type
      KeyName: 'simplilearn-keypair'      # Replace with your EC2 Key Pair name
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          sudo su
          apt update
          apt install -y apache2 mysql-server php libapache2-mod-php php-mysql
          systemctl enable apache2
          systemctl start apache2

          # Install AWS CLI to retrieve secrets from Secrets Manager
          apt install -y awscli

          # Get database credentials from Secrets Manager
          DB_SECRET=$(aws secretsmanager get-secret-value --secret-id WordPressDBSecret --query SecretString --output text)
          DB_HOST=$(echo "$DB_SECRET" | jq -r '.DBHost')
          DB_USERNAME=$(echo "$DB_SECRET" | jq -r '.DBUsername')
          DB_PASSWORD=$(echo "$DB_SECRET" | jq -r '.DBPassword')
          DB_NAME=$(echo "$DB_SECRET" | jq -r '.DBName')

          # Download and install WordPress
          cd /var/www/html
          wget https://wordpress.org/latest.tar.gz
          tar -xzf latest.tar.gz
          mv wordpress/* .
          rm -rf wordpress latest.tar.gz

          # Configure WordPress
          cp wp-config-sample.php wp-config.php
          sed -i "s/database_name_here/wordpress-blog-live/g" wp-config.php
          sed -i "s/username_here/${DBUsername}/g" wp-config.php
          sed -i "s/password_here/${DBPassword}/g" wp-config.php
          sed -i "s/localhost/${WordPressDatabase.Endpoint.Address}/g" wp-config.php
          chown -R www-data:www-data /var/www/html

          # Restart Apache
          systemctl restart apache2

      SecurityGroups:
        - !Ref WordPressInstanceSecurityGroup
      IamInstanceProfile: !Ref EC2InstanceRole

  # Health Check Policy with Simple Routing Policy
  WordPressHealthCheck:
    Type: 'AWS::Route53::HealthCheck'
    Properties:
      HealthCheckConfig:
        Type: 'HTTPS'
        ResourcePath: '/'
        FullyQualifiedDomainName: !Sub 'www.${DomainName}.'
        SearchString: 'Your WordPress site is working'
        RequestInterval: 30
        FailureThreshold: 3
        MeasureLatency: true
        Inverted: false
        Disabled: false
      HealthCheckTags:
        - Key: 'Name'
          Value: 'WordPressHealthCheck'
      HealthCheckTags:
        - Key: 'Environment'
          Value: 'Production'

  # SNS Topic for Health Check Alerts
  WordPressSnsTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      DisplayName: 'WordPressHealthCheckAlert'
      TopicName: 'WordPressHealthCheckAlert'
      Subscription:
        - Endpoint: 'jangra.viren@gmail.com'
          Protocol: 'email'
    # ... (same resources as DevWordPressInstance)

Outputs:
  DevInstanceEndpoint:
    Description: 'Endpoint URL for the DEV EC2 Instance'
    Value: !GetAtt DevWordPressInstance.PublicIp

  LiveInstanceEndpoint:
    Description: 'Endpoint URL for the LIVE EC2 Instance'
    Value: !GetAtt LiveWordPressInstance.PublicIp

  DatabaseEndpoint:
    Description: 'Endpoint URL for the RDS MySQL Database'
    Value: !GetAtt WordPressDatabase.Endpoint.Address

  LambdaTriggerURL:
    Description: 'URL to manually trigger the StartStopDevEC2Instance Lambda'
    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/lambda/home?region=${AWS::Region}#/functions/${LambdaFunction.Arn}'